ContemElemento:
Chama recursivamente as funções ContemElementoPilha, ContemElementoFila e ContemElementoLista para verificar a existência do elemento em cada estrutura.
Retorna true se o elemento for encontrado em alguma das estruturas, caso contrário, retorna false.
Funções auxiliares:
Caso base: Se o nó atual for nulo (fim da estrutura), retorna false, pois o elemento não foi encontrado.
Caso recursivo: Compara o elemento atual com o valor procurado. Se forem iguais, retorna true. Caso contrário, chama a si mesma recursivamente para o próximo nó.
Como funciona a recursão:

A função percorre cada nó da estrutura, comparando o valor do nó com o valor procurado. Se encontrar uma correspondência, retorna true, interrompendo a recursão. Caso contrário, continua a busca no próximo nó até chegar ao final da estrutura ou encontrar o elemento.

Vantagens da solução:

Clareza: O código é conciso e fácil de entender.
Reusabilidade: As funções auxiliares podem ser reutilizadas em outras partes do código.
Flexibilidade: Pode ser facilmente adaptado para outras estruturas de dados encadeadas.
Observações:

A recursão pode consumir mais memória em casos de estruturas muito grandes.
Para estruturas muito grandes, pode ser mais eficiente utilizar um loop iterativo.
A complexidade de tempo da solução é linear (O(n)), onde n é o número total de nós.
Exemplo de uso:

C#
Doidao doidao = new Doidao();
// ... (adicionar elementos)
bool encontrado = doidao.ContemElemento(5);
if (encontrado)
{
    Console.WriteLine("Elemento encontrado!");
}
else
{
    Console.WriteLine("Elemento não encontrado!");
}
Use o código com cuidado.

Outras opções:

Iteração: Em vez de usar recursão, poderia ser utilizado um loop while para percorrer as estruturas.
Busca binária: Se as estruturas estiverem ordenadas, poderia ser utilizada a busca binária para encontrar o elemento de forma mais eficiente.
Conclusão:

A função recursiva apresentada é uma solução eficiente e clara para verificar a existência de um elemento nas estruturas do Doidao. A recursão permite uma implementação concisa e elegante, facilitando a compreensão do código.